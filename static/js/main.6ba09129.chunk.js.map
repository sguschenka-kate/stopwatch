{"version":3,"sources":["app.js","lib/timeConvertion.js","index.js"],"names":["App","useState","sec","setSec","lastValue","setLastValue","status","setStatus","res","seconds","minutes","Math","floor","hours","timeConvertion","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","val","next","waitRef","useRef","wait","useDoubleClick","onSingleClick","e","onDoubleClick","ref","latency","className","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAOA,SAASA,IAAO,IAAD,EACSC,mBAAS,GADlB,mBACNC,EADM,KACDC,EADC,OAEqBF,mBAASC,GAF9B,mBAENE,EAFM,KAEKC,EAFL,OAGeJ,mBAAS,QAHxB,mBAGNK,EAHM,KAGEC,EAHF,KAKPC,ECZe,SAACN,GACtB,IAAIO,EAAUP,EACVQ,EAAUC,KAAKC,MAAMV,EAAM,IAC/BO,GAAoB,GACpB,IAAMI,EAAQF,KAAKC,MAAMF,EAAU,IAEnC,OADAA,GAAoB,GACd,GAAN,OAAUG,EAAQ,GAAK,IAAMA,EAAQA,EAArC,cAAgDH,EAAU,GAAK,IAAMA,EAAUA,EAA/E,cAA4FD,EAAU,GAAK,IAAMA,EAAUA,GDM/GK,CAAeV,GAE3BW,qBAAU,WACR,IAAMC,EAAe,IAAIC,IAkBzB,OAjBAC,YAAS,KACNC,KACCC,YAAUJ,IAEXK,WAAU,SAACC,GACK,UAAXhB,IACFH,EAAOC,EAAY,GACnBC,EAAaH,IAEA,SAAXI,IACFU,EAAaO,OACblB,EAAaH,IAEA,gBAAXI,GACFU,EAAaO,UAGZ,WACLP,EAAaO,UAEd,CAACnB,EAAWF,EAAKI,IAEpB,IAeMkB,EAAUC,mBACVC,EAAOC,YAAe,CAC1BC,cAAe,SAAAC,GACbtB,EAAU,gBAEZuB,cAAe,SAAAD,GACbtB,EAAU,SAEZwB,IAAKP,EACLQ,QAAS,MAGX,OACE,sBAAKC,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,yBAEA,sBAAKA,UAAU,yBAAf,cAA0CzB,EAA1C,OAEA,sBAAKyB,UAAU,yBAAf,UACE,wBACEA,UAAU,uBACVC,QApCM,WACZ3B,EAAU,UAiCN,mBAIA,wBACE0B,UAAU,sBACVC,QApCK,WACX3B,EAAU,QACVJ,EAAO,GACPE,EAAa,IA+BT,kBAIA,wBACE4B,UAAU,sBACVF,IAAKP,EACLU,QAASR,EAHX,kBAKA,wBACEO,UAAU,uBACVC,QAvCM,WACZ/B,EAAO,GACPE,EAAa,IAmCT,yB,ME/ER8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrC,EAAD,MAEFsC,SAASC,eAAe,W","file":"static/js/main.6ba09129.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\nimport { interval, Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { timeConvertion } from './lib/timeConvertion';\nimport useDoubleClick from 'use-double-click';\nimport './app.css';\n\nfunction App() {\n  const [sec, setSec] = useState(0);\n  const [lastValue, setLastValue] = useState(sec);\n  const [status, setStatus] = useState(\"stop\");\n\n  const res = timeConvertion(lastValue);\n\n  useEffect(() => {\n    const unsubscribe$ = new Subject();\n    interval(1000)\n      .pipe(\n        takeUntil(unsubscribe$),\n      )\n      .subscribe((val) => {\n        if (status === \"start\") {\n          setSec(lastValue + 1)\n          setLastValue(sec)\n        }\n        if (status === \"wait\") {\n          unsubscribe$.next();\n          setLastValue(sec)\n        }\n        if (status === \"single-wait\") {\n          unsubscribe$.next();\n        }\n      });\n    return () => {\n      unsubscribe$.next();\n    };\n  }, [lastValue, sec, status]);\n\n  const start = () => {\n    setStatus(\"start\");\n  };\n\n  const stop = () => {\n    setStatus(\"stop\");\n    setSec(0);\n    setLastValue(0)\n  };\n\n  const reset = () => {\n    setSec(0);\n    setLastValue(0)\n  };\n\n  const waitRef = useRef();\n  const wait = useDoubleClick({\n    onSingleClick: e => {\n      setStatus(\"single-wait\")\n    },\n    onDoubleClick: e => {\n      setStatus(\"wait\")\n    },\n    ref: waitRef,\n    latency: 300\n  })\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">Stopwatcher</h1>\n\n      <div className=\"app__counter-container\"> {res} </div>\n\n      <div className=\"app__buttons-container\">\n        <button\n          className=\"button button--start\"\n          onClick={start}\n        >Start</button>\n        <button\n          className=\"button button--stop\"\n          onClick={stop}\n        >Stop</button>\n        <button\n          className=\"button button--wait\"\n          ref={waitRef}\n          onClick={wait}\n        >Wait</button>\n        <button\n          className=\"button button--reset\"\n          onClick={reset}\n        >Reset</button>\n      </div>\n    </div>\n  );\n}\n\nexport {\n  App\n}\n","const timeConvertion = (sec) => {\n  let seconds = sec;\n  let minutes = Math.floor(sec / 60);\n  seconds = seconds % 60;\n  const hours = Math.floor(minutes / 60);\n  minutes = minutes % 60;\n  return `${hours < 10 ? `0` + hours : hours} : ${minutes < 10 ? `0` + minutes : minutes} : ${seconds < 10 ? `0` + seconds : seconds}`;\n}\n\nexport {\n  timeConvertion\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app';\n\nimport './assets/scss/main.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}